#!/usr/bin/python


import sys
import os

def usage():
    sys.stderr.write( \
        'Usage: ./cidrmerge < cidr_list [cidr_list...] > output\n')
    raise SystemExit(1)

def _d(message):
    if os.environ.get('DEBUG'):
        sys.stderr.write('DEBUG: %s\n' % message)
    return None

def __ip_to_int(ipaddr): # return int
    a,b,c,d=ipaddr.split('.')
    i  = int(a)*(2**24)
    i += int(b)*(2**16)
    i += int(c)*(2**8)
    i += int(d)
    return i

def __int_to_ip(i): # return string
    a = i / 2**24
    b = (i - a * 2**24) / 2**16
    c = (i - a * 2**24 - b * 2**16) / 2**8
    d = (i - a * 2**24 - b * 2**16 - c * 2**8)
    return '%d.%d.%d.%d' % (a, b, c, d)

def __cidr_to_range(cidr): # return tuple of 2 ints
    if '/' in cidr:
        ip,maskbits_s = cidr.split('/',1)
        mbits = int(maskbits_s)
        start = __ip_to_int(ip)
        end = start + 2 ** (32 - mbits) - 1
        if start % (2 ** (32 - mbits)) != 0:
            x = start - (start % (2 ** (32 - mbits)))
            suggested_start0 = __int_to_ip(x)
            suggested_start1 = __int_to_ip(x + (1 << (32 - mbits)))
            raise ValueError( \
                '[%s] Invalid starting address for /%d. Try %s or %s' \
                % (cidr, mbits, suggested_start0, suggested_start1))
    else:
        start = __ip_to_int(cidr)
        end = start
    return (start, end)

def __range_to_cidrs(range_list): # return list of strings
    outlist = []
    a = range_list[0]
    b = range_list[1]
    span = b - a + 1
    _d('Span = %d' % span)
    if span == 1:
        outlist.append('%s/32' % __int_to_ip(a))
        return outlist
    i = 1
    while i < 33:
        x = span >> i
        if x == 1:
            mbits = 32 - i
            _d('outlist.append: %s - %s --> %s/%d' % \
             (a, b, __int_to_ip(a), mbits))
            outlist.append('%s/%d' % (__int_to_ip(a), mbits))
            consumed = (1 << i)
            remainder = span - consumed
            _d('Remainder = %d' % remainder)
            if remainder > 0:
                a += consumed
                span = remainder
                i = 1
            else:
                break
        elif x == 0:
            raise ValueError( \
                "Failed to identify suitable mask size for span=%s" \
                % span)
        else:
            i += 1
    return outlist

def __first(a_list): # return first element of a_list
    return a_list[0]


ranges = []

if len(sys.argv) > 1:
    usage()

while True:
    line = sys.stdin.readline()
    if line == '':
        break
    c = line.find('#')
    if c != -1:
        line = line[:c]
    if line.strip() == '':
        continue
    _d('%s -> %s' % (line.strip(), __cidr_to_range(line.strip())))
    ranges.append(__cidr_to_range(line.strip()))

ranges.sort(None, __first)

i = 0
while i < len(ranges):
    _d('Input range: %d -> %d' % (ranges[i][0], ranges[i][1]))
    a = ranges[i][0]
    b = ranges[i][1]
    j = 1
    while i + j <= len(ranges):
        _d('i=%d, j=%d' % (i, j))
        if i + j == len(ranges):
            if b < ranges[i+j-1][1]:
                b = ranges[i+j-1][1]
            i += (j - 1)
            break
        _d('Comparing %d >= %d' % (b, ranges[i+j][0]-1))
        if b >= ranges[i+j][0]-1:
            j += 1
        else:
            if b < ranges[i+j-1][1]:
                b = ranges[i+j-1][1]
            i += (j - 1)
            break
    for c in  __range_to_cidrs((a, b)):
        print c
    i += 1

